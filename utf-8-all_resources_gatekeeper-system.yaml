apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      aks.component/sig: azure-policy
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-06-13T00:40:37Z"
    generateName: gatekeeper-audit-99df4bbb7-
    labels:
      control-plane: audit-controller
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 99df4bbb7
    name: gatekeeper-audit-99df4bbb7-wdx29
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: gatekeeper-audit-99df4bbb7
      uid: 4e5c8c83-10c0-46d8-a9c6-4902b5450b0c
    resourceVersion: "70016255"
    uid: 6156dcde-450c-420c-bf16-b97df5d490db
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - key: kubernetes.azure.com/mode
              operator: In
              values:
              - system
          weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.azure.com/cluster
              operator: Exists
            - key: type
              operator: NotIn
              values:
              - virtual-kubelet
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: gatekeeper.sh/operation
                operator: In
                values:
                - webhook
            topologyKey: kubernetes.io/hostname
          weight: 100
    automountServiceAccountToken: true
    containers:
    - args:
      - --logtostderr
      - --audit-interval=600
      - --constraint-violations-limit=500
      - --audit-from-cache=false
      - --audit-match-kind-only=true
      - --operation=audit
      - --operation=status
      - --operation=mutation-status
      - --operation=generate
      - --disable-cert-rotation
      - --disable-opa-builtin={http.send}
      - --enable-external-data=true
      - --audit-events-involved-namespace=false
      - --enable-generator-resource-expansion=true
      - --enable-violation-export=false
      - --default-wait-for-vapb-generation=30
      - --enable-k8s-native-validation=true
      - --default-create-vap-for-templates=false
      - --default-create-vap-binding-for-constraints=false
      command:
      - /manager
      env:
      - name: KUBERNETES_SERVICE_HOST
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: KUBERNETES_PORT
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP_ADDR
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CONTAINER_NAME
        value: gatekeeper-audit-container
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: gatekeeper-audit-container
      ports:
      - containerPort: 8888
        name: metrics
        protocol: TCP
      - containerPort: 9090
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/audit
        name: tmp-volume
      - mountPath: /certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tgf5t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-dvmsssypto01-16550377-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gatekeeper-admin
    serviceAccountName: gatekeeper-admin
    terminationGracePeriodSeconds: 60
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: cert
      secret:
        defaultMode: 420
        secretName: gatekeeper-webhook-server-cert
    - name: kube-api-access-tgf5t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7894177e160ad6e6266abb9b8af05ea2130eca0e2350b5c0291fa3238d2689fc
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imageID: sha256:147e803e49e1842077ae3420c18d958c047bc5d79dcd7c902ce347b98d2e7ee0
      lastState: {}
      name: gatekeeper-audit-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-06-13T00:40:40Z"
    hostIP: 10.73.111.134
    hostIPs:
    - ip: 10.73.111.134
    phase: Running
    podIP: 10.244.1.15
    podIPs:
    - ip: 10.244.1.15
    qosClass: Burstable
    startTime: "2025-06-13T00:40:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      aks.component/sig: azure-policy
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-06-13T00:40:57Z"
    generateName: gatekeeper-controller-7c4cd8cddd-
    labels:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 7c4cd8cddd
    name: gatekeeper-controller-7c4cd8cddd-mj8mr
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: gatekeeper-controller-7c4cd8cddd
      uid: 26d7197f-15b7-4e4e-8db4-caa6b51c4552
    resourceVersion: "70016442"
    uid: d64aaf27-643e-4791-ba4e-cdb803d43e56
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - key: kubernetes.azure.com/mode
              operator: In
              values:
              - system
          weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.azure.com/cluster
              operator: Exists
            - key: type
              operator: NotIn
              values:
              - virtual-kubelet
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: gatekeeper.sh/operation
                operator: In
                values:
                - webhook
                - audit
            topologyKey: kubernetes.io/hostname
          weight: 100
    automountServiceAccountToken: true
    containers:
    - args:
      - --port=8443
      - --log-denies
      - --logtostderr
      - --operation=webhook
      - --operation=mutation-webhook
      - --log-mutations
      - --mutation-annotations
      - --disable-cert-rotation
      - --tls-min-version=1.3
      - --disable-opa-builtin={http.send}
      - --enable-external-data=true
      - --admission-events-involved-namespace=false
      - --enable-generator-resource-expansion=true
      - --default-wait-for-vapb-generation=30
      - --enable-k8s-native-validation=true
      - --default-create-vap-for-templates=false
      - --default-create-vap-binding-for-constraints=false
      command:
      - /manager
      env:
      - name: KUBERNETES_SERVICE_HOST
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: KUBERNETES_PORT
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP_ADDR
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CONTAINER_NAME
        value: gatekeeper-controller-container
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: gatekeeper-controller-container
      ports:
      - containerPort: 8443
        name: webhook-server
        protocol: TCP
      - containerPort: 8888
        name: metrics
        protocol: TCP
      - containerPort: 9090
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b7v2c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-dvmsssypto01-16550377-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gatekeeper-admin
    serviceAccountName: gatekeeper-admin
    terminationGracePeriodSeconds: 60
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - name: cert
      secret:
        defaultMode: 420
        secretName: gatekeeper-webhook-server-cert
    - name: kube-api-access-b7v2c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:41:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:41:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ffe065823c5b4d2ca3623fd422ac7091987e083dac897478ecd660328c28cb78
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imageID: sha256:147e803e49e1842077ae3420c18d958c047bc5d79dcd7c902ce347b98d2e7ee0
      lastState: {}
      name: gatekeeper-controller-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-06-13T00:40:58Z"
    hostIP: 10.73.111.134
    hostIPs:
    - ip: 10.73.111.134
    phase: Running
    podIP: 10.244.1.32
    podIPs:
    - ip: 10.244.1.32
    qosClass: Burstable
    startTime: "2025-06-13T00:40:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      aks.component/sig: azure-policy
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2025-06-13T00:40:36Z"
    generateName: gatekeeper-controller-7c4cd8cddd-
    labels:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 7c4cd8cddd
    name: gatekeeper-controller-7c4cd8cddd-pd6lg
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: gatekeeper-controller-7c4cd8cddd
      uid: 26d7197f-15b7-4e4e-8db4-caa6b51c4552
    resourceVersion: "70016211"
    uid: f34cf1f3-2ed9-4efa-b594-6eca81ab42d4
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - key: kubernetes.azure.com/mode
              operator: In
              values:
              - system
          weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.azure.com/cluster
              operator: Exists
            - key: type
              operator: NotIn
              values:
              - virtual-kubelet
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: gatekeeper.sh/operation
                operator: In
                values:
                - webhook
                - audit
            topologyKey: kubernetes.io/hostname
          weight: 100
    automountServiceAccountToken: true
    containers:
    - args:
      - --port=8443
      - --log-denies
      - --logtostderr
      - --operation=webhook
      - --operation=mutation-webhook
      - --log-mutations
      - --mutation-annotations
      - --disable-cert-rotation
      - --tls-min-version=1.3
      - --disable-opa-builtin={http.send}
      - --enable-external-data=true
      - --admission-events-involved-namespace=false
      - --enable-generator-resource-expansion=true
      - --default-wait-for-vapb-generation=30
      - --enable-k8s-native-validation=true
      - --default-create-vap-for-templates=false
      - --default-create-vap-binding-for-constraints=false
      command:
      - /manager
      env:
      - name: KUBERNETES_SERVICE_HOST
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: KUBERNETES_PORT
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP
        value: tcp://d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io:443
      - name: KUBERNETES_PORT_443_TCP_ADDR
        value: d-210-akscl-sviya-k8-p-to-01.privatelink.canadacentral.azmk8s.io
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CONTAINER_NAME
        value: gatekeeper-controller-container
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: gatekeeper-controller-container
      ports:
      - containerPort: 8443
        name: webhook-server
        protocol: TCP
      - containerPort: 8888
        name: metrics
        protocol: TCP
      - containerPort: 9090
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 9090
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bqfsr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-dvmsssypto01-16550377-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gatekeeper-admin
    serviceAccountName: gatekeeper-admin
    terminationGracePeriodSeconds: 60
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - name: cert
      secret:
        defaultMode: 420
        secretName: gatekeeper-webhook-server-cert
    - name: kube-api-access-bqfsr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-06-13T00:40:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1e587a880d0ee56cac8ca269bb8efb8c828a6205eff9ed43f3d05c7868737cc1
      image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
      imageID: sha256:147e803e49e1842077ae3420c18d958c047bc5d79dcd7c902ce347b98d2e7ee0
      lastState: {}
      name: gatekeeper-controller-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-06-13T00:40:40Z"
    hostIP: 10.73.111.134
    hostIPs:
    - ip: 10.73.111.134
    phase: Running
    podIP: 10.244.1.8
    podIPs:
    - ip: 10.244.1.8
    qosClass: Burstable
    startTime: "2025-06-13T00:40:36Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","gatekeeper.sh/system":"yes"},"name":"gatekeeper-webhook-service","namespace":"gatekeeper-system"},"spec":{"ports":[{"name":"https-webhook-server","port":443,"targetPort":"webhook-server"}],"selector":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes"}}}
    creationTimestamp: "2025-03-11T19:24:12Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      gatekeeper.sh/system: "yes"
    name: gatekeeper-webhook-service
    namespace: gatekeeper-system
    resourceVersion: "776"
    uid: 41afef6e-4d7c-4432-b4cf-3d5d586f8ce5
  spec:
    clusterIP: 10.0.18.8
    clusterIPs:
    - 10.0.18.8
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https-webhook-server
      port: 443
      protocol: TCP
      targetPort: webhook-server
    selector:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","control-plane":"controller-manager","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"},"name":"gatekeeper-audit","namespace":"gatekeeper-system"},"spec":{"paused":false,"replicas":1,"revisionHistoryLimit":2,"selector":{"matchLabels":{"control-plane":"audit-controller","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes"}},"template":{"metadata":{"annotations":{"aks.component/sig":"azure-policy","cluster-autoscaler.kubernetes.io/safe-to-evict":"true"},"labels":{"control-plane":"audit-controller","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.azure.com/mode","operator":"In","values":["system"]}]},"weight":100}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.azure.com/cluster","operator":"Exists"},{"key":"type","operator":"NotIn","values":["virtual-kubelet"]},{"key":"kubernetes.io/os","operator":"In","values":["linux"]}]}]}},"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"gatekeeper.sh/operation","operator":"In","values":["webhook"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":true,"containers":[{"args":["--logtostderr","--audit-interval=600","--constraint-violations-limit=500","--audit-from-cache=false","--audit-match-kind-only=true","--operation=audit","--operation=status","--operation=mutation-status","--operation=generate","--disable-cert-rotation","--disable-opa-builtin={http.send}","--enable-external-data=true","--audit-events-involved-namespace=false","--enable-generator-resource-expansion=true","--enable-violation-export=false","--default-wait-for-vapb-generation=30","--enable-k8s-native-validation=true","--default-create-vap-for-templates=false","--default-create-vap-binding-for-constraints=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"CONTAINER_NAME","value":"gatekeeper-audit-container"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)"}],"image":"mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":9090}},"name":"gatekeeper-audit-container","ports":[{"containerPort":8888,"name":"metrics","protocol":"TCP"},{"containerPort":9090,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":9090}},"resources":{"limits":{"cpu":"2000m","memory":"3072Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsGroup":999,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp/audit","name":"tmp-volume"},{"mountPath":"/certs","name":"cert","readOnly":true}]}],"priorityClassName":"system-node-critical","serviceAccountName":"gatekeeper-admin","terminationGracePeriodSeconds":60,"tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"},{"name":"cert","secret":{"defaultMode":420,"secretName":"gatekeeper-webhook-server-cert"}}]}}}}
    creationTimestamp: "2025-03-11T19:24:12Z"
    generation: 3
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      control-plane: controller-manager
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
    name: gatekeeper-audit
    namespace: gatekeeper-system
    resourceVersion: "70016257"
    uid: d8e19c12-37cb-472d-a266-e66b3c2bb1b1
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        control-plane: audit-controller
        gatekeeper.sh/operation: audit
        gatekeeper.sh/system: "yes"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: audit-controller
          gatekeeper.sh/operation: audit
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --logtostderr
          - --audit-interval=600
          - --constraint-violations-limit=500
          - --audit-from-cache=false
          - --audit-match-kind-only=true
          - --operation=audit
          - --operation=status
          - --operation=mutation-status
          - --operation=generate
          - --disable-cert-rotation
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --audit-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-violation-export=false
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-audit-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-audit-container
          ports:
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/audit
            name: tmp-volume
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp-volume
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-11T19:24:12Z"
      lastUpdateTime: "2025-05-30T23:15:42Z"
      message: ReplicaSet "gatekeeper-audit-99df4bbb7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-06-13T00:40:58Z"
      lastUpdateTime: "2025-06-13T00:40:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"},"name":"gatekeeper-controller","namespace":"gatekeeper-system"},"spec":{"paused":false,"replicas":2,"revisionHistoryLimit":2,"selector":{"matchLabels":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes"}},"template":{"metadata":{"annotations":{"aks.component/sig":"azure-policy","cluster-autoscaler.kubernetes.io/safe-to-evict":"true"},"labels":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.azure.com/mode","operator":"In","values":["system"]}]},"weight":100}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.azure.com/cluster","operator":"Exists"},{"key":"type","operator":"NotIn","values":["virtual-kubelet"]},{"key":"kubernetes.io/os","operator":"In","values":["linux"]}]}]}},"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"gatekeeper.sh/operation","operator":"In","values":["webhook","audit"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":true,"containers":[{"args":["--port=8443","--log-denies","--logtostderr","--operation=webhook","--operation=mutation-webhook","--log-mutations","--mutation-annotations","--disable-cert-rotation","--tls-min-version=1.3","--disable-opa-builtin={http.send}","--enable-external-data=true","--admission-events-involved-namespace=false","--enable-generator-resource-expansion=true","--default-wait-for-vapb-generation=30","--enable-k8s-native-validation=true","--default-create-vap-for-templates=false","--default-create-vap-binding-for-constraints=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"CONTAINER_NAME","value":"gatekeeper-controller-container"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)"}],"image":"mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":9090}},"name":"gatekeeper-controller-container","ports":[{"containerPort":8443,"name":"webhook-server","protocol":"TCP"},{"containerPort":8888,"name":"metrics","protocol":"TCP"},{"containerPort":9090,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":9090}},"resources":{"limits":{"cpu":"2000m","memory":"2048Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsGroup":999,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/certs","name":"cert","readOnly":true}]}],"priorityClassName":"system-node-critical","serviceAccountName":"gatekeeper-admin","terminationGracePeriodSeconds":60,"tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"name":"cert","secret":{"defaultMode":420,"secretName":"gatekeeper-webhook-server-cert"}}]}}}}
    creationTimestamp: "2025-03-11T19:24:12Z"
    generation: 3
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
    name: gatekeeper-controller
    namespace: gatekeeper-system
    resourceVersion: "70016447"
    uid: 65f3273e-7750-461a-9b75-9ecc93b003c2
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        control-plane: controller-manager
        gatekeeper.sh/operation: webhook
        gatekeeper.sh/system: "yes"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          gatekeeper.sh/operation: webhook
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                    - audit
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8443
          - --log-denies
          - --logtostderr
          - --operation=webhook
          - --operation=mutation-webhook
          - --log-mutations
          - --mutation-annotations
          - --disable-cert-rotation
          - --tls-min-version=1.3
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --admission-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-controller-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-controller-container
          ports:
          - containerPort: 8443
            name: webhook-server
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-03-11T19:24:12Z"
      lastUpdateTime: "2025-05-30T23:15:45Z"
      message: ReplicaSet "gatekeeper-controller-7c4cd8cddd" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-06-13T00:41:00Z"
      lastUpdateTime: "2025-06-13T00:41:00Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-03-11T19:24:12Z"
    generation: 2
    labels:
      control-plane: audit-controller
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 6445fd5d59
    name: gatekeeper-audit-6445fd5d59
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-audit
      uid: d8e19c12-37cb-472d-a266-e66b3c2bb1b1
    resourceVersion: "6954312"
    uid: c8996921-6e83-4825-980f-1995c94f0606
  spec:
    replicas: 0
    selector:
      matchLabels:
        control-plane: audit-controller
        gatekeeper.sh/operation: audit
        gatekeeper.sh/system: "yes"
        pod-template-hash: 6445fd5d59
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: audit-controller
          gatekeeper.sh/operation: audit
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: 6445fd5d59
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --logtostderr
          - --audit-interval=600
          - --constraint-violations-limit=500
          - --audit-from-cache=false
          - --audit-match-kind-only=true
          - --operation=audit
          - --operation=status
          - --operation=mutation-status
          - --disable-cert-rotation
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --audit-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-pub-sub=false
          - --enable-k8s-native-validation=false
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-audit-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.17.1-5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-audit-container
          ports:
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/audit
            name: tmp-volume
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp-volume
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2025-03-25T23:23:09Z"
    generation: 2
    labels:
      control-plane: audit-controller
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 77858c8f69
    name: gatekeeper-audit-77858c8f69
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-audit
      uid: d8e19c12-37cb-472d-a266-e66b3c2bb1b1
    resourceVersion: "58806727"
    uid: 8480cf75-2a71-413b-bbf7-50e87833e7ef
  spec:
    replicas: 0
    selector:
      matchLabels:
        control-plane: audit-controller
        gatekeeper.sh/operation: audit
        gatekeeper.sh/system: "yes"
        pod-template-hash: 77858c8f69
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: audit-controller
          gatekeeper.sh/operation: audit
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: 77858c8f69
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --logtostderr
          - --audit-interval=600
          - --constraint-violations-limit=500
          - --audit-from-cache=false
          - --audit-match-kind-only=true
          - --operation=audit
          - --operation=status
          - --operation=mutation-status
          - --operation=generate
          - --disable-cert-rotation
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --audit-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-pub-sub=false
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-audit-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.18.2-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-audit-container
          ports:
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/audit
            name: tmp-volume
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp-volume
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-05-30T23:15:32Z"
    generation: 1
    labels:
      control-plane: audit-controller
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 99df4bbb7
    name: gatekeeper-audit-99df4bbb7
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-audit
      uid: d8e19c12-37cb-472d-a266-e66b3c2bb1b1
    resourceVersion: "70016256"
    uid: 4e5c8c83-10c0-46d8-a9c6-4902b5450b0c
  spec:
    replicas: 1
    selector:
      matchLabels:
        control-plane: audit-controller
        gatekeeper.sh/operation: audit
        gatekeeper.sh/system: "yes"
        pod-template-hash: 99df4bbb7
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: audit-controller
          gatekeeper.sh/operation: audit
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: 99df4bbb7
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --logtostderr
          - --audit-interval=600
          - --constraint-violations-limit=500
          - --audit-from-cache=false
          - --audit-match-kind-only=true
          - --operation=audit
          - --operation=status
          - --operation=mutation-status
          - --operation=generate
          - --disable-cert-rotation
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --audit-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-violation-export=false
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-audit-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-audit-container
          ports:
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/audit
            name: tmp-volume
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp-volume
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2025-03-25T23:23:09Z"
    generation: 4
    labels:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 6f97954b4b
    name: gatekeeper-controller-6f97954b4b
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-controller
      uid: 65f3273e-7750-461a-9b75-9ecc93b003c2
    resourceVersion: "58807044"
    uid: da54617a-8e0d-42b3-b768-df93ea91bedc
  spec:
    replicas: 0
    selector:
      matchLabels:
        control-plane: controller-manager
        gatekeeper.sh/operation: webhook
        gatekeeper.sh/system: "yes"
        pod-template-hash: 6f97954b4b
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          gatekeeper.sh/operation: webhook
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: 6f97954b4b
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                    - audit
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8443
          - --log-denies
          - --logtostderr
          - --operation=webhook
          - --operation=mutation-webhook
          - --log-mutations
          - --mutation-annotations
          - --disable-cert-rotation
          - --tls-min-version=1.3
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --admission-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-controller-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.18.2-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-controller-container
          ports:
          - containerPort: 8443
            name: webhook-server
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-05-30T23:15:32Z"
    generation: 2
    labels:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: 7c4cd8cddd
    name: gatekeeper-controller-7c4cd8cddd
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-controller
      uid: 65f3273e-7750-461a-9b75-9ecc93b003c2
    resourceVersion: "70016446"
    uid: 26d7197f-15b7-4e4e-8db4-caa6b51c4552
  spec:
    replicas: 2
    selector:
      matchLabels:
        control-plane: controller-manager
        gatekeeper.sh/operation: webhook
        gatekeeper.sh/system: "yes"
        pod-template-hash: 7c4cd8cddd
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          gatekeeper.sh/operation: webhook
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: 7c4cd8cddd
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                    - audit
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8443
          - --log-denies
          - --logtostderr
          - --operation=webhook
          - --operation=mutation-webhook
          - --log-mutations
          - --mutation-annotations
          - --disable-cert-rotation
          - --tls-min-version=1.3
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --admission-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-controller-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-controller-container
          ports:
          - containerPort: 8443
            name: webhook-server
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-03-11T19:24:12Z"
    generation: 3
    labels:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
      pod-template-hash: fd9bd9645
    name: gatekeeper-controller-fd9bd9645
    namespace: gatekeeper-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gatekeeper-controller
      uid: 65f3273e-7750-461a-9b75-9ecc93b003c2
    resourceVersion: "6954828"
    uid: 46ad2c53-42f7-442c-acff-1c2527349a4b
  spec:
    replicas: 0
    selector:
      matchLabels:
        control-plane: controller-manager
        gatekeeper.sh/operation: webhook
        gatekeeper.sh/system: "yes"
        pod-template-hash: fd9bd9645
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          gatekeeper.sh/operation: webhook
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
          pod-template-hash: fd9bd9645
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                    - audit
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8443
          - --log-denies
          - --logtostderr
          - --operation=webhook
          - --operation=mutation-webhook
          - --log-mutations
          - --mutation-annotations
          - --disable-cert-rotation
          - --tls-min-version=1.3
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --admission-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-k8s-native-validation=false
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-controller-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.17.1-5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-controller-container
          ports:
          - containerPort: 8443
            name: webhook-server
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    observedGeneration: 3
    replicas: 0
kind: List
metadata:
  resourceVersion: ""
